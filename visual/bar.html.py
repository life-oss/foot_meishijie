import pandas as pd
import openpyxl
import pymysql
import pyecharts.options as opts
from pyecharts.charts import Timeline, Bar, Pie

# df_money_2016=pd.read_excel('交通事故数据.xlsx',engine='openpyxl',usecols=[0,1,5])
# data=df_money_2016.values
# # print(data)
# # 地区
# areas=[]
# numbers_money_2016=[]
# for area,year,number in data:
#     areas.append(area)
#     numbers_money_2016.append(number)
# print(numbers_money_2016)


total_data = {}
name_list = ['北京市', '天津市', '河北省', '山西省', '内蒙古自治区', '辽宁省', '吉林省', '黑龙江省', '上海市', '江苏省', '浙江省', '安徽省', '福建省', '江西省',
             '山东省', '河南省', '湖北省', '湖南省', '广东省', '广西壮族自治区', '海南省', '重庆市', '四川省', '贵州省', '云南省', '西藏自治区', '陕西省', '甘肃省',
             '青海省', '宁夏回族自治区', '新疆维吾尔自治区']
data_money = {
    2016: [2819.4, 4488.8, 5008.3, 3975.6, 1402.6, 1849.6, 5326.4, 4217.0, 370.8, 6390.0, 5983.0, 6323.0, 2410.0,
           5425.6, 6276.9, 4376.1, 8832.1, 6383.0, 7380.5, 1854.0, 1515.0, 2147.9, 5760.5, 9475.1, 2905.9, 290.5,
           3810.7, 1065.4, 750.7, 754.9, 1190.5],
    2017: [3149.5, 4532.8, 4694.8, 3683.6, 1639.1, 1838.0, 4562.5, 3782.1, 362.8, 5818.9, 4773.2, 5541.9, 2351.9,
           5093.8, 6183.3, 4556.0, 9484.6, 5227.4, 10412.8, 1908.4, 1236.3, 1813.2, 4960.2, 11994.8, 3152.6, 278.0,
           4223.3, 830.0, 1120.3, 928.7, 1176.7],
    2018: [3517.1, 4041.7, 4838.0, 5092.4, 3116.3, 1909.5, 3530.8, 5432.7, 501.1, 6442.4, 4858.0, 5418.7, 2109.9,
           5937.0, 5572.6, 10938.1, 13224.2, 5522.8, 7865.8, 6038.1, 1770.9, 1867.4, 7664.6, 9327.1, 2930.7, 243.5,
           4685.9, 972.7, 1167.6, 680.8, 1237.5],
    2019: [3513.0, 4145.9, 4777.2, 5831.4, 2403.3, 2154.2, 2264.3, 3733.5, 693.3, 6036.0, 3830.8, 5344.4, 2235.6,
           6547.4, 5429.2, 10266.4, 13978.8, 3678.9, 7547.5, 7739.0, 1821.7, 1603.4, 8369.7, 9256.1, 3477.0, 595.6,
           4000.0, 821.8, 1027.5, 558.3, 936.7]
}

data_ah = {
    2016: [2784, 6398, 4433, 5278, 3297, 4491, 6068, 3906, 235, 12009, 14369, 14852, 9665, 5207, 12573, 5383, 16775,
           9094, 26825, 3592, 2748, 6233, 8395, 18108, 5519, 349, 5777, 3177, 1124, 1778, 5988],
    2017: [2803, 5542, 4427, 4934, 3480, 4335, 5556, 3839, 221, 11595, 12160, 12806, 9334, 5797, 12595, 6123, 11070,
           6658, 24477, 3660, 2479, 5909, 7481, 19360, 5504, 427, 5578, 3130, 1175, 1677, 5522],

    2018: [2800, 6551, 4303, 8022, 4614, 4260, 5593, 5606, 242, 11300, 11410, 11936, 10207, 7668, 12332, 21638, 21218,
           5398, 24025, 19314, 3145, 5268, 10427, 15752, 5931, 495, 6196, 3243, 1302, 1735, 6601],
    2019: [2788, 6632, 4191, 8825, 4401, 4300, 4205, 5855, 295, 10409, 10563, 11993, 9090, 6743, 12190, 19034, 26015,
           4067, 21935, 23021, 3148, 4776, 11335, 16399, 6249, 569, 5800, 2988, 1525, 1549, 5211]
}

data_ni = {
    2016: [1359, 821, 2500, 2131, 972, 1954, 1843, 1140, 760, 4601, 4187, 2651, 1888, 2102, 3614, 1950, 4511, 1572,
           5501, 2246, 636, 953, 2352, 2274, 3002, 146, 1575, 1357, 529, 372, 1594],
    2017: [1378, 813, 2496, 2125, 1014, 1971, 2013, 1137, 676, 4567, 3837, 2692, 1879, 2122, 3665, 2076, 4775, 1156,
           5345, 2247, 674, 947, 2166, 3472, 2920, 165, 1561, 1320, 527, 376, 1660],
    2018: [1288, 750, 2494, 2102, 1003, 1860, 1191, 1289, 647, 4490, 3561, 2626, 1809, 2015, 3600, 2670, 4837, 1124,
           4917, 4459, 839, 915, 2351, 2327, 2755, 124, 1501, 1270, 508, 408, 1464],
    2019: [1258, 736, 2494, 2052, 981, 1946, 1032, 1059, 1130, 4268, 3236, 2603, 1821, 1999, 3553, 2560, 4904, 898,
           4932, 4379, 771, 945, 2476, 2921, 2718, 137, 1258, 1194, 530, 407, 1565]
}

data_dt = {
    2016: [2819.4, 4488.8, 5008.3, 3975.6, 1402.6, 1849.6, 5326.4, 4217.0, 370.8, 6390.0, 5983.0, 6323.0, 2410.0,
           5425.6, 6276.9, 4376.1, 8832.1, 6383.0, 7380.5, 1854.0, 1515.0, 2147.9, 5760.5, 9475.1, 2905.9, 290.5,
           3810.7, 1065.4, 750.7, 754.9, 1190.5],
    2017: [3149.5, 4532.8, 4694.8, 3683.6, 1639.1, 1838.0, 4562.5, 3782.1, 362.8, 5818.9, 4773.2, 5541.9, 2351.9,
           5093.8, 6183.3, 4556.0, 9484.6, 5227.4, 10412.8, 1908.4, 1236.3, 1813.2, 4960.2, 11994.8, 3152.6, 278.0,
           4223.3, 830.0, 1120.3, 928.7, 1176.7],
    2018: [3517.1, 4041.7, 4838.0, 5092.4, 3116.3, 1909.5, 3530.8, 5432.7, 501.1, 6442.4, 4858.0, 5418.7, 2109.9,
           5937.0, 5572.6, 10938.1, 13224.2, 5522.8, 7865.8, 6038.1, 1770.9, 1867.4, 7664.6, 9327.1, 2930.7, 243.5,
           4685.9, 972.7, 1167.6, 680.8, 1237.5],
    2019: [3513.0, 4145.9, 4777.2, 5831.4, 2403.3, 2154.2, 2264.3, 3733.5, 693.3, 6036.0, 3830.8, 5344.4, 2235.6,
           6547.4, 5429.2, 10266.4, 13978.8, 3678.9, 7547.5, 7739.0, 1821.7, 1603.4, 8369.7, 9256.1, 3477.0, 595.6,
           4000.0, 821.8, 1027.5, 558.3, 936.7]
}


def format_data(data: dict) -> dict:
    for year in range(2016, 2019):
        max_data, sum_data = 0, 0
        temp = data[year]
        max_data = max(temp)
        for i in range(len(temp)):
            sum_data += temp[i]
            data[year][i] = {"name": name_list[i], "value": temp[i]}
        data[str(year) + "max"] = int(max_data / 100) * 100
        data[str(year) + "sum"] = sum_data
    return data


# 直接财产损失(万元）
total_data["dataMONEY"] = format_data(data=data_money)
# 事故发生次数 accident happened
total_data["dataAH"] = format_data(data=data_ah)
# 受伤人数 number of injury
total_data["dataNI"] = format_data(data=data_ni)
# 死亡人数 death toll
total_data["dataDT"] = format_data(data=data_dt)


#####################################################################################
# 2002 - 2011 年的数据
def get_year_overlap_chart(year: int) -> Bar:
    bar = (
        Bar()
            .add_xaxis(xaxis_data=name_list)
            .add_yaxis(
            series_name="经济损失",
            yaxis_data=total_data["dataMONEY"][year],
            is_selected=False,
            label_opts=opts.LabelOpts(is_show=False),
        )
            .add_yaxis(
            series_name="事故发生次数",
            yaxis_data=total_data["dataAH"][year],
            is_selected=False,
            label_opts=opts.LabelOpts(is_show=False),
        )
            .add_yaxis(
            series_name="受伤人数",
            yaxis_data=total_data["dataNI"][year],
            is_selected=False,
            label_opts=opts.LabelOpts(is_show=False),
        )
            .add_yaxis(
            series_name="死亡人数",
            yaxis_data=total_data["dataDT"][year],
            label_opts=opts.LabelOpts(is_show=False),
        )
            .set_global_opts(
            title_opts=opts.TitleOpts(
                title="{}全国宏观经济指标".format(year), subtitle="数据来自国家统计局"
            ),
            tooltip_opts=opts.TooltipOpts(
                is_show=True, trigger="axis", axis_pointer_type="shadow"
            ),
        )
    )
    pie = (
        Pie()
            .add(
            series_name="GDP占比",
            data_pair=[
                ["第一产业", total_data["dataPI"]["{}sum".format(year)]],
                ["第二产业", total_data["dataSI"]["{}sum".format(year)]],
                ["第三产业", total_data["dataTI"]["{}sum".format(year)]],
            ],
            center=["75%", "35%"],
            radius="28%",
        )
            .set_series_opts(tooltip_opts=opts.TooltipOpts(is_show=True, trigger="item"))
    )


    return bar.overlap(pie)

# 生成时间轴的图
timeline = Timeline(init_opts=opts.InitOpts(width="1600px", height="800px"))

for y in range(2016, 2019):
    timeline.add(get_year_overlap_chart(year=y), time_point=str(y))

# 1.0.0 版本的 add_schema 暂时没有补上 return self 所以只能这么写着
timeline.add_schema(is_auto_play=True, play_interval=1000)
timeline.render("finance_indices_2002.html")
